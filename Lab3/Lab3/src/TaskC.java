import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.Phaser;
import java.util.concurrent.Semaphore;

public class TaskC {
    public static void main(String[] args) {
        ConcurrentLinkedQueue<Items> queue = new ConcurrentLinkedQueue<>();
        Object isSmoking = new Object();
        int count = 10;
        Phaser phaser = new Phaser();
        Broker broker = new Broker(queue, isSmoking, count);
        Smoker withPaper = new Smoker(queue, isSmoking, count, Item.PAPER, phaser);
        Smoker withTobacco = new Smoker(queue, isSmoking, count, Item.TOBACCO, phaser);
        Smoker withMatches = new Smoker(queue, isSmoking, count, Item.MATCHES, phaser);
        new Thread(broker).start();
        new Thread(withPaper).start();
        new Thread(withTobacco).start();
        new Thread(withMatches).start();
    }
}

enum Items {
    WITHOUT_TOBACCO,
    WITHOUT_MATCHES,
    WITHOUT_PAPER,
}

class Broker implements Runnable {
    public final static Map<Items, String> map;
    private final Random random = new Random(System.currentTimeMillis());
    private final ConcurrentLinkedQueue<Items> queue;
    public final static Semaphore sem;
    private final Object isSmoking;
    private final int count;

    static {
        map = new HashMap<>(){{
            put(Items.WITHOUT_MATCHES, "–ø–∞–ø—ñ—Ä —ñ —Ç–∞–±–∞–∫");
            put(Items.WITHOUT_PAPER, "—Ç–∞–±–∞–∫ —ñ —Å—ñ—Ä–Ω–∏–∫–∏");
            put(Items.WITHOUT_TOBACCO, "–ø–∞–ø—ñ—Ä —Ç–∞ —Å—ñ—Ä–Ω–∏–∫–∏");
        }};
        sem = new Semaphore(3);
        try {
            sem.acquire(3);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public Broker(ConcurrentLinkedQueue<Items> queue, Object isSmoking, int count) {
        this.queue = queue;
        this.isSmoking = isSmoking;
        this.count = count;
    }

    private Items getRandItems() {
        return switch (random.nextInt() % 3) {
            case 0 -> Items.WITHOUT_TOBACCO;
            case 1 -> Items.WITHOUT_MATCHES;
            default -> Items.WITHOUT_PAPER;
        };
    }

    @Override
    public void run() {
        Items items = getRandItems();
        queue.add(items);
        sem.release(3);
        System.out.printf("–ü–æ—Å–µ—Ä–µ–¥–Ω–∏–∫ –ø–æ–∫–ª–∞–≤ –Ω–∞ —Å—Ç—ñ–ª %s\n", map.get(items));
        for (int i = 1; i < count; i++) {
            try {
                synchronized (isSmoking) {
                    isSmoking.wait();
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                System.out.println("‚ùå Broker is interrupted");
            }
            items = getRandItems();
            queue.add(items);
            System.out.printf("–ü–æ—Å–µ—Ä–µ–¥–Ω–∏–∫ –ø–æ–∫–ª–∞–≤ –Ω–∞ —Å—Ç—ñ–ª %s\n", map.get(items));
            sem.release(3);
        }
    }
}

enum Item {
    PAPER,
    TOBACCO,
    MATCHES
}

class Smoker implements Runnable {
    private static final Map<Item, String> map1;
    private final Phaser phaser;
    private final ConcurrentLinkedQueue<Items> queue;
    private final Object isSmoking;
    private final int count;
    private final Item item;

    static {
        map1 = new HashMap<>(){{
            put(Item.PAPER, "–ø–∞–ø–µ—Ä–æ–º");
            put(Item.TOBACCO, "—Ç–∞–±–∞–∫–æ–º");
            put(Item.MATCHES, "—Å—ñ—Ä–Ω–∏–∫–∞–º–∏");
        }};
    }

    public Smoker(ConcurrentLinkedQueue<Items> queue, Object isSmoking, int count, Item item, Phaser phaser) {
        this.queue = queue;
        this.isSmoking = isSmoking;
        this.count = count;
        this.item = item;
        this.phaser = phaser;
        phaser.register();
    }

    @Override
    public void run() {
        for (int i = 0; i < count; i++) {
            try {
                Broker.sem.acquire();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                System.out.printf("‚ùå –ü–æ—Ç—ñ–∫ –∫—É—Ä—Ü—è, —É —è–∫–æ–≥–æ —î %s –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ", item);
            }
            Items items = queue.peek();
            System.out.printf("–ö—É—Ä–µ—Ü—å –∑ %s –ø–æ–≥–ª—è–Ω—É–≤ –Ω–∞ —Å—Ç—ñ–ª\n", map1.get(item));
            phaser.arriveAndAwaitAdvance();
            switch (items) {
                case WITHOUT_MATCHES:
                    if (item == Item.MATCHES) {
                        System.out.printf("\n–ö—É—Ä–µ—Ü—å –∑ %s –≤–∑—è–≤ —Ç–∞–±–∞–∫ —ñ –ø–∞–ø—ñ—Ä\nüö¨ üö¨ üö¨ üö¨ üö¨ üö¨ üö¨ üö¨ üö¨ üö¨\n–ö—É—Ä–µ—Ü—å –∑ %s –∑–∞–∫—ñ–Ω—á–∏–≤ –∫—É—Ä–∏—Ç–∏\n\n", map1.get(item), map1.get(item));
                        queue.poll();
                        synchronized (isSmoking) {
                            isSmoking.notify();
                        }
                    }
                    break;
                case WITHOUT_PAPER:
                    if (item == Item.PAPER) {
                        System.out.printf("\n–ö—É—Ä–µ—Ü—å –∑ %s –≤–∑—è–≤ —Ç–∞–±–∞–∫ —ñ —Å—ñ—Ä–Ω–∏–∫–∏\nüö¨ üö¨ üö¨ üö¨ üö¨ üö¨ üö¨ üö¨ üö¨ üö¨\n–ö—É—Ä–µ—Ü—å –∑ %s –∑–∞–∫—ñ–Ω—á–∏–≤ –∫—É—Ä–∏—Ç–∏\n\n", map1.get(item), map1.get(item));
                        queue.poll();
                        synchronized (isSmoking) {
                            isSmoking.notify();
                        }
                    }
                    break;
                case WITHOUT_TOBACCO:
                    if (item == Item.TOBACCO) {
                        System.out.printf("\n–ö—É—Ä–µ—Ü—å –∑ %s –≤–∑—è–≤ –ø–∞–ø—ñ—Ä —ñ —Å—ñ—Ä–Ω–∏–∫–∏\nüö¨ üö¨ üö¨ üö¨ üö¨ üö¨ üö¨ üö¨ üö¨ üö¨\n–ö—É—Ä–µ—Ü—å –∑ %s –∑–∞–∫—ñ–Ω—á–∏–≤ –∫—É—Ä–∏—Ç–∏\n\n", map1.get(item), map1.get(item));
                        queue.poll();
                        synchronized (isSmoking) {
                            isSmoking.notify();
                        }
                    }
                    break;
                default:
                    throw new NullPointerException("–ü–æ—Å–µ—Ä–µ–¥–Ω–∏–∫ —â–µ –Ω–µ –ø–æ–∫–ª–∞–≤ –Ω—ñ—á–æ–≥–æ –Ω–∞ —Å—Ç—ñ–ª");
            }
            phaser.arriveAndAwaitAdvance();
        }
    }
}